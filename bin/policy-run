#!/usr/bin/env ruby

require 'methadone'
require 'json'
require 'conjur/cli'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |context, host, *docker_args|
    env = make_env context, host

    env_args = env.keys.map { |k| ['-e', k] }.flatten

    args = %w(docker run) + env_args + docker_args

    debug "Executing: #{args.join ' '}"
    exec env, *args
  end

  description <<EOD

Launch a docker container with a Conjurized web service in a policy context

Conjurized docker container expects several environment variables to set up
configuration. This scripts reads the current Conjur configuration and a policy
context file to set up the environment and passes control to docker.

Policy context file should be a result of loading corresponding policy, eg.

  conjur policy load -c context.json policy.rb

and contain the host API keys.
EOD
  
  arg "context.json", "path to policy context"
  arg :host, "host name (as defined in the policy file)"
  arg "docker args", "arguments for docker run"

  version "0.0.1"

  use_log_level_option

  def self.make_env context, host
    policy = JSON.parse(File.read(context))
    policy_name = policy['policy']
    host_id = policy['api_keys'].keys.find{|k| k.split(":")[1] == "host" && k.split(":")[2] == "#{policy_name}/#{host}"}
    raise "Host '#{host}' not found" unless host_id
    host_api_key = policy['api_keys'][host_id]
    appliance_url = Conjur.configuration.appliance_url or raise "No appliance_url in Conjur config"
    cert = Conjur::Config['cert_file'] or raise "No cert_file in Conjur config"
    cert = File.read(cert)

    env = {
      'CONJUR_APPLIANCE_URL' => Conjur.configuration.appliance_url,
      'CONJUR_ACCOUNT' => Conjur.configuration.account,
      'CONJUR_CERT' => cert,
      'CONJUR_AUTHN_LOGIN' => "host/#{host_id.split(':')[-1]}",
      'CONJUR_AUTHN_API_KEY' => host_api_key,
      'CONJUR_POLICY' => policy_name,
    }

    return env
  end
end

# hack to pass the rest of arguments to docker
class OptionParser::InvalidOption
  def set_option *a
    super
    throw :terminate, args.join(' ')
  end
end

App.go!
