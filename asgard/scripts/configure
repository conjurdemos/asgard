#!/bin/sh -e
#
# Configure the docker container
#

if ! [ -z "$DEBUG" ]; then
  set -x
fi


# Check if all expected variables are set

ARGS="APPLIANCE_URL CERT ACCOUNT AUTHN_LOGIN AUTHN_API_KEY POLICY"
for a in $ARGS; do
  VAR=CONJUR_$a
  if eval [ -z \"\$$VAR\" ]; then
    echo "$VAR environment variable required but not set."
    exit 1
  fi
done


# Create Conjur config files

# TODO: make sure nginx verifies the cert
echo "$CONJUR_CERT" > /etc/conjur.pem

cat > /etc/conjur.conf << EOF
  appliance_url: $CONJUR_APPLIANCE_URL
  account: $CONJUR_ACCOUNT
  netrc_path: /etc/conjur.identity
  cert_file: /etc/conjur.pem
EOF

cat > /etc/conjur.identity << EOF
  machine $CONJUR_APPLIANCE_URL/authn
  login $CONJUR_AUTHN_LOGIN
  password $CONJUR_AUTHN_API_KEY
EOF

chmod 0600 /etc/conjur.identity


# Configure nginx gate

CONJUR_HOST=$(echo $CONJUR_APPLIANCE_URL | cut -d/ -f3)
sed "
  s@<conjur-host>@$CONJUR_HOST@;
  s@<conjur-account>@$CONJUR_ACCOUNT@;
  s@<conjur-login>@$CONJUR_AUTHN_LOGIN@;
  s@<conjur-key>@$CONJUR_AUTHN_API_KEY@;
  s@<conjur-login-quoted>@$(echo $CONJUR_AUTHN_LOGIN | sed s@/@%2F@)@;
" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf

sed -i -e "
  s@<conjur-policy>@$CONJUR_POLICY@;
" /etc/asgard/asgard.env.yaml

# Add verisign cert (used by AWS) to Java truststore

keytool -keystore /usr/lib/jvm/java-1.7-openjdk/jre/lib/security/cacerts \
  -storepass changeit -importcert -noprompt \
  -alias verisign-g5 -file /etc/asgard/verisign-g5.crt
